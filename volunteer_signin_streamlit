import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from streamlit_autorefresh import st_autorefresh
import re

# üîÅ Auto-refresh every 30 seconds
st_autorefresh(interval=30 * 1000, key="data_refresh")

st.title("üìã Spring Quarter Volunteer Sign-In Data (Live)")

# === Step 0: Your split logic ===
def days(tracking):
    d1 = tracking.iloc[3:60, 1:4]
    d2 = tracking.iloc[3:60, 5:8]
    d3 = tracking.iloc[3:60, 9:12]
    d4 = tracking.iloc[3:60,13:16]
    d5 = tracking.iloc[3:60,17:20]
    d6 = tracking.iloc[3:61,21:24]
    d7 = tracking.iloc[3:61,25:28]
    return [d1,d2,d3,d4,d5,d6,d7]

def weekday(day):
    return [
      day.iloc[3:11],   # stocking
      day.iloc[11:17],  # 10‚Äì11
      day.iloc[17:23],  # 11‚Äì12
      day.iloc[23:29],  # 12‚Äì1
      day.iloc[29:35],  # 1‚Äì2
      day.iloc[35:41],  # 2‚Äì3
      day.iloc[41:47],  # 3‚Äì4
      day.iloc[47:52],  # closing
      day.iloc[52:57],  # covers
    ]

def weekend(day):
    return [
      day.iloc[10:14],  # opening
      day.iloc[16:20],  # closing
      day.iloc[52:57],  # covers
    ]

def entry(row):
    """ row.iloc[0]=shift label, [1]=name, [2]=attendance """
    if not pd.isna(row.iloc[1]) and str(row.iloc[1]).strip():
        return row.iloc[0], row.iloc[1], row.iloc[2]
    return None

# === Step 1: Sheets API Setup ===
def get_gspread_client():
    scope = [
      "https://spreadsheets.google.com/feeds",
      "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name(
      "pantry-data-science-project-cafc469e7c30.json", scope
    )
    return gspread.authorize(creds)

client = get_gspread_client()
SHEET_URL = ""
sheet = client.open_by_url(SHEET_URL)

# === Step 2: Process each weekly tab using your logic ===
def process_week_signup_grid(ws, week_name):
    try:
        raw = ws.get_all_values()
        max_len = max(len(r) for r in raw)
        norm = [r + [""]*(max_len - len(r)) for r in raw]
        tracking = pd.DataFrame(norm)
        
        # build per-week DataFrame
        cols = ["Name","Week","Day and time","Shift Type","Attended"]
        out = pd.DataFrame(columns=cols)
        
        # split into day blocks
        day_blocks = days(tracking)
        
        # Mon‚ÄìFri (indices 0‚Äì4)
        for di in range(5):
            block = day_blocks[di]
            day_label = block.iloc[0,0]  # e.g. "Monday 4/14"
            shifts   = weekday(block)
            
            for si, shift_blk in enumerate(shifts):
                # map index to time string
                if   si==0:  time="Stocking Shift: 9:00 AM - 10:30 AM"
                elif si==1:  time="10:00 AM - 11:00 AM"
                elif si==2:  time="11:00 AM - 12:00 PM"
                elif si==3:  time="12:00 PM - 1:00 PM"
                elif si==4:  time="1:00 PM - 2:00 PM"
                elif si==5:  time="2:00 PM - 3:00 PM"
                elif si==6:  time="3:00 PM - 4:00 PM"
                elif si==7:  time="Closing Shift: 4:00 PM - 4:45 PM"
                else:        time="Shift Covers (variable)"
                
                for _, row in shift_blk.iterrows():
                    e = entry(row)
                    if not e: 
                        continue
                    stype, name, attend = e
                    # tag stocking/closing with dual label
                    if si==0:
                        stypetag = f"{stype}, Stocking"
                    elif si==7:
                        stypetag = f"{stype}, Closing"
                    else:
                        stypetag = stype
                    out = pd.concat([out, pd.DataFrame([[
                      name, week_name,
                      f"{day_label}, {time}",
                      stypetag, 
                      "Yes" if str(attend).lower() in ["yes","true","‚úî","‚úì"] else "No"
                    ]], columns=cols)])
        
        # Sat‚ÄìSun (5‚Äì6)
        for di in [5,6]:
            block = day_blocks[di]
            day_label = block.iloc[0,0]
            shifts    = weekend(block)
            for si, shift_blk in enumerate(shifts):
                if   si==0: time="Opening Shift: 12:00 PM - 1:00 PM"
                elif si==1: time="Closing Shift: 1:00 PM - 2:00 PM"
                else:       time="Shift Covers (variable)"
                
                for _, row in shift_blk.iterrows():
                    e = entry(row)
                    if not e:
                        continue
                    stype, name, attend = e
                    out = pd.concat([out, pd.DataFrame([[
                      name, week_name,
                      f"{day_label}, {time}",
                      stype,
                      "Yes" if str(attend).lower() in ["yes","true","‚úî","‚úì"] else "No"
                    ]], columns=cols)])
        
        out = out.reset_index(drop=True)
        return out

    except Exception as e:
        st.warning(f"‚ö†Ô∏è Skipping {week_name}: {e}")
        return pd.DataFrame(columns=["Name","Week","Day and time","Shift Type","Attended"])

# === Step 3: Process the ‚ÄúNames and Attendance‚Äù sheet ===
def process_attendance_sheet(ws):
    try:
        raw = ws.get_all_records(head=22)
        df  = pd.DataFrame(raw)
        df  = df[df["First + Last Name"].str.strip()!=""]
        rows=[]
        for _, r in df.iterrows():
            name = r["First + Last Name"]
            for col,val in r.items():
                if isinstance(val,(int,float)) and val>0:
                    if "Week" in col and "Hours" in col:
                        wk = re.search(r"Week \d+",col)
                        week = wk.group(0) if wk else "Unknown"
                        rows.append((name, week, "Logged hours", "regular", "Yes"))
                    elif "Food Recovery" in col:
                        rows.append((name,"All Weeks","Food Recovery","food recovery","Yes"))
                    elif "Mobile Pantry" in col:
                        rows.append((name,"All Weeks","Mobile Pantry","mobile pantry","Yes"))
                    elif "Misc" in col:
                        rows.append((name,"All Weeks","Misc.","misc","Yes"))
        return pd.DataFrame(rows, columns=["Name","Week","Day and time","Shift Type","Attended"])
    except Exception as e:
        st.error(f"‚ùå Attendance sheet error: {e}")
        return pd.DataFrame(columns=["Name","Week","Day and time","Shift Type","Attended"])

# === Step 4: Combine all data ===
def collect_all_data():
    attend_ws = sheet.worksheet("Names and Attendance")
    attendance_df = process_attendance_sheet(attend_ws)

    week_dfs = {}
    for ws in sheet.worksheets():
        if "Sign-ups" in ws.title and "Week" in ws.title:
            wk = re.search(r"Week \d+", ws.title)
            week_name = wk.group(0) if wk else ws.title
            st.info(f"üìÑ Processing {week_name}")
            dfw = process_week_signup_grid(ws, week_name)
            if not dfw.empty:
                st.success(f"‚úÖ {week_name}: {len(dfw)} entries")
                week_dfs[week_name] = dfw

    # replace ‚ÄúLogged hours‚Äù with actual sign-up shifts
    final_rows = []
    for _, row in attendance_df.iterrows():
        if row["Day and time"]=="Logged hours" and row["Week"] in week_dfs:
            wl = week_dfs[row["Week"]]
            match = wl[wl["Name"].str.lower().str.strip()==row["Name"].lower().strip()]
            final_rows.append(match if not match.empty else pd.DataFrame([row]))
        else:
            final_rows.append(pd.DataFrame([row]))

    combined = pd.concat(final_rows, ignore_index=True)
    return combined

# === Step 5: Display & Download ===
df_all = collect_all_data()
st.subheader("Live Combined Volunteer Table")
st.dataframe(df_all, use_container_width=True)

csv = df_all.to_csv(index=False).encode("utf-8")
st.download_button("Download as CSV", csv, "spring_volunteer_data.csv", "text/csv")
